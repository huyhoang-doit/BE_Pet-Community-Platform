const { GoogleGenerativeAI } = require('@google/generative-ai')

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)

async function checkContentAndImage(text, imageBuffer) {
  const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro-latest' })

  const prompt = `
    B·∫°n l√† h·ªá th·ªëng ki·ªÉm duy·ªát n·ªôi dung v√† h√¨nh ·∫£nh chuy√™n nghi·ªáp. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch to√†n di·ªán d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p v√† x√°c ƒë·ªãnh ch√≠nh x√°c c√°c d·∫•u hi·ªáu c·ªßa n·ªôi dung c√≥ h·∫°i.
    
    H√£y ƒë√°nh gi√° n·ªôi dung d·ª±a tr√™n c√°c ti√™u ch√≠ sau:
    1. Spam: N·ªôi dung qu·∫£ng c√°o kh√¥ng li√™n quan, l·∫∑p l·∫°i, ho·∫∑c g·ª≠i h√†ng lo·∫°t
    2. L·ª´a ƒë·∫£o: N·ªôi dung c√≥ d·∫•u hi·ªáu l·ª´a ƒë·∫£o, m·∫°o danh, ho·∫∑c y√™u c·∫ßu th√¥ng tin c√° nh√¢n ƒë√°ng ng·ªù
    3. X√∫c ph·∫°m: Ng√¥n t·ª´/h√¨nh ·∫£nh th√π ƒë·ªãch, ph√¢n bi·ªát ƒë·ªëi x·ª≠, ho·∫∑c qu·∫•y r·ªëi
    4. B·∫°o l·ª±c: M√¥ t·∫£ ho·∫∑c k√≠ch ƒë·ªông b·∫°o l·ª±c
    5. T√¨nh d·ª•c: N·ªôi dung khi√™u d√¢m ho·∫∑c kh√¥ng ph√π h·ª£p
    6. Sai l·ªách: Th√¥ng tin sai l·ªách ho·∫∑c g√¢y hi·ªÉu nh·∫ßm
    7. Ph√¢n bi·ªát ƒë·ªëi x·ª≠: Bi·ªÉu t∆∞·ª£ng th√π h·∫≠n ho·∫∑c k·ª≥ th·ªã
    
    Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng JSON v·ªõi ƒë·ªãnh d·∫°ng ch√≠nh x√°c sau:
    {
      "content_analysis": {
        "spam": true/false,
        "scam": true/false,
        "offensive": true/false,
        "violence": true/false,
        "sexual": true/false,
        "misleading": true/false,
        "discrimination": true/false,
        "overall_toxic": true/false,
        "confidence_score": [0-100],
        "reason": "Gi·∫£i th√≠ch chi ti·∫øt l√Ω do ƒë√°nh gi√° n·ªôi dung vƒÉn b·∫£n, n·∫øu kh√¥ng c√≥ vi ph·∫°m th√¨ ghi 'Kh√¥ng ph√°t hi·ªán n·ªôi dung vi ph·∫°m'"
      },
      "image_analysis": {
        "spam": true/false,
        "scam": true/false,
        "offensive": true/false,
        "violence": true/false,
        "sexual": true/false,
        "discrimination": true/false,
        "overall_harmful": true/false,
        "confidence_score": [0-100],
        "image_description": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ n·ªôi dung c·ªßa h√¨nh ·∫£nh",
        "reason": "Gi·∫£i th√≠ch chi ti·∫øt l√Ω do ƒë√°nh gi√° h√¨nh ·∫£nh, n·∫øu kh√¥ng c√≥ vi ph·∫°m th√¨ ghi 'Kh√¥ng ph√°t hi·ªán n·ªôi dung vi ph·∫°m'"
      },
      "combined_assessment": {
        "is_harmful": true/false,
        "reason": "ƒê√°nh gi√° t·ªïng th·ªÉ v·ªÅ to√†n b·ªô n·ªôi dung"
      }
    }
  `

  try {
    let contentParts = []

    contentParts.push({ text: prompt })

    // Th√™m n·ªôi dung vƒÉn b·∫£n n·∫øu c√≥
    if (text && text.trim()) {
      contentParts.push({ text: `\n\nN·ªôi dung vƒÉn b·∫£n c·∫ßn ki·ªÉm duy·ªát: ${text}` })
    }

    // Th√™m h√¨nh ·∫£nh n·∫øu c√≥
    if (imageBuffer) {
      const base64Image = imageBuffer.toString('base64')
      contentParts.push({ inlineData: { mimeType: 'image/jpeg', data: base64Image } })
    }

    // N·∫øu kh√¥ng c√≥ n·ªôi dung vƒÉn b·∫£n v√† kh√¥ng c√≥ h√¨nh ·∫£nh, kh√¥ng c·∫ßn g·ªçi API
    if (contentParts.length <= 1) {
      return {
        content_analysis: {
          overall_toxic: false,
          confidence_score: 0,
          reason: 'Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ki·ªÉm duy·ªát'
        },
        image_analysis: {
          overall_harmful: false,
          confidence_score: 0,
          image_description: 'Kh√¥ng c√≥ h√¨nh ·∫£nh',
          reason: 'Kh√¥ng c√≥ h√¨nh ·∫£nh ƒë·ªÉ ki·ªÉm duy·ªát'
        },
        combined_assessment: {
          is_harmful: false,
          reason: 'Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ki·ªÉm duy·ªát'
        }
      }
    }

    const result = await model.generateContent(contentParts)
    let responseText = result.response.text()
    console.log('Raw response:', responseText)

    // T√¨m v√† tr√≠ch xu·∫•t JSON t·ª´ ph·∫£n h·ªìi
    const jsonMatch = responseText.match(/\{[\s\S]*\}/)
    const jsonString = jsonMatch ? jsonMatch[0] : responseText.replace(/```json|```/g, '').trim()

    return JSON.parse(jsonString)
  } catch (error) {
    console.error('Error parsing JSON:', error)
    return {
      content_analysis: {
        spam: false,
        scam: false,
        offensive: false,
        violence: false,
        sexual: false,
        misleading: false,
        discrimination: false,
        overall_toxic: false,
        confidence_score: 0,
        reason: 'L·ªói x·ª≠ l√Ω n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i.'
      },
      image_analysis: {
        spam: false,
        scam: false,
        offensive: false,
        violence: false,
        sexual: false,
        discrimination: false,
        overall_harmful: false,
        confidence_score: 0,
        image_description: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch',
        reason: 'L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.'
      },
      combined_assessment: {
        is_harmful: false,
        reason: 'L·ªói x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i.'
      }
    }
  }
}

async function chatbot(breedName) {
  const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
  const prompt = `H√£y cung c·∫•p h∆∞·ªõng d·∫´n chƒÉm s√≥c chi ti·∫øt cho gi·ªëng th√∫ c∆∞ng "${breedName}". 
  H√£y s·ª≠ d·ª•ng icon (emoji) ph√π h·ª£p ƒë·ªÉ minh h·ªça t·ª´ng ph·∫ßn trong c√¢u tr·∫£ l·ªùi. V√≠ d·ª•: ü•© cho dinh d∆∞·ª°ng, üõÅ cho v·ªá sinh, üö∂ cho v·∫≠n ƒë·ªông.`

  try {
    const result = await model.generateContent(prompt)
    let responseText = result.response.text()
    console.log('Raw response:', responseText)

    // Chuy·ªÉn ƒë·ªïi Markdown sang HTML
    let responseHtml = responseText
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\n- (.*?)/g, '<li>$1</li>')
      .replace(/\n/g, '<br>')

    return `<div>${responseHtml}</div>`
  } catch (error) {
    console.error('Error:', error)
    return `
      <div>
        <p>Hi·ªán t·∫°i kh√¥ng th·ªÉ l·∫•y th√¥ng tin chƒÉm s√≥c t·ª´ Gemini. D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n c∆° b·∫£n m·∫∑c ƒë·ªãnh:</p>
        <ul>
          <li>ü•© <strong>Dinh d∆∞·ª°ng:</strong> Cho ƒÉn th·ª©c ƒÉn ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc v√† ƒë·ªô tu·ªïi.</li>
          <li>üõÅ <strong>V·ªá sinh:</strong> T·∫Øm 1-2 l·∫ßn/th√°ng, ch·∫£i l√¥ng th∆∞·ªùng xuy√™n.</li>
          <li>üö∂ <strong>V·∫≠n ƒë·ªông:</strong> D·∫Øt ƒëi d·∫°o 20-30 ph√∫t/ng√†y.</li>
          <li>üè• <strong>S·ª©c kh·ªèe:</strong> Kh√°m th√∫ y ƒë·ªãnh k·ª≥.</li>
          <li>üè† <strong>M√¥i tr∆∞·ªùng:</strong> Chu·∫©n b·ªã ch·ªó ngh·ªâ s·∫°ch s·∫Ω, tho√°ng m√°t.</li>
        </ul>
      </div>
    `
  }
}


// async function checkImage(imageBuffer) {
//   const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro-latest' })

//   const base64Image = imageBuffer.toString('base64')

//   const prompt = `
//     B·∫°n l√† h·ªá th·ªëng ki·ªÉm duy·ªát h√¨nh ·∫£nh chuy√™n nghi·ªáp. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch to√†n di·ªán h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p v√† x√°c ƒë·ªãnh ch√≠nh x√°c c√°c d·∫•u hi·ªáu c·ªßa n·ªôi dung c√≥ h·∫°i.

//     H√£y ƒë√°nh gi√° h√¨nh ·∫£nh d·ª±a tr√™n c√°c ti√™u ch√≠ sau:
//     1. B·∫°o l·ª±c: H√¨nh ·∫£nh th·ªÉ hi·ªán h√†nh vi b·∫°o l·ª±c, v≈© kh√≠, ho·∫∑c t·ªïn th∆∞∆°ng
//     2. T√¨nh d·ª•c: N·ªôi dung khi√™u d√¢m ho·∫∑c kh√¥ng ph√π h·ª£p v·ªÅ t√¨nh d·ª•c
//     3. Qu·∫•y r·ªëi: H√¨nh ·∫£nh nh·∫±m m·ª•c ƒë√≠ch b√¥i nh·ªç ho·∫∑c qu·∫•y r·ªëi c√° nh√¢n
//     4. L·ª´a ƒë·∫£o: H√¨nh ·∫£nh ƒë∆∞·ª£c s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch l·ª´a ƒë·∫£o (nh∆∞ gi·∫£ m·∫°o ch·ª©ng t·ª´)
//     5. Spam: H√¨nh ·∫£nh qu·∫£ng c√°o kh√¥ng li√™n quan ho·∫∑c l·∫∑p l·∫°i
//     6. Ph√¢n bi·ªát ƒë·ªëi x·ª≠: Bi·ªÉu t∆∞·ª£ng th√π h·∫≠n ho·∫∑c k·ª≥ th·ªã

//     Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng JSON v·ªõi ƒë·ªãnh d·∫°ng ch√≠nh x√°c sau:
//     {
//       "violence": true/false,
//       "sexual": true/false,
//       "harassment": true/false,
//       "scam": true/false,
//       "spam": true/false,
//       "discrimination": true/false,
//       "overall_harmful": true/false,
//       "confidence_score": [0-100],
//       "image_description": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ n·ªôi dung c·ªßa h√¨nh ·∫£nh",
//       "moderation_reason": "Gi·∫£i th√≠ch chi ti·∫øt l√Ω do ƒë√°nh gi√°, n·∫øu kh√¥ng c√≥ vi ph·∫°m th√¨ ghi 'Kh√¥ng ph√°t hi·ªán n·ªôi dung vi ph·∫°m'"
//     }
//   `
//   try {
//     const result = await model.generateContent([
//       { text: prompt },
//       { inlineData: { mimeType: 'image/jpeg', data: base64Image } }
//     ])

//     let responseText = result.response.text()
//     console.log('Raw response:', responseText)

//     // T√¨m v√† tr√≠ch xu·∫•t JSON t·ª´ ph·∫£n h·ªìi
//     const jsonMatch = responseText.match(/\{[\s\S]*\}/)
//     const jsonString = jsonMatch ? jsonMatch[0] : responseText.replace(/```json|```/g, '').trim()

//     return JSON.parse(jsonString)
//   } catch (error) {
//     console.error('Error parsing JSON:', error)
//     return {
//       violence: false,
//       sexual: false,
//       harassment: false,
//       scam: false,
//       spam: false,
//       discrimination: false,
//       overall_harmful: false,
//       confidence_score: 0,
//       image_description: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch',
//       moderation_reason: 'L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.'
//     }
//   }
// }

// H√†m ri√™ng cho vƒÉn b·∫£n - wrapper cho h√†m ch√≠nh
async function checkContent(text) {
  const result = await checkContentAndImage(text, null)
  return result.content_analysis
}

// H√†m ri√™ng cho h√¨nh ·∫£nh - wrapper cho h√†m ch√≠nh
async function checkImage(imageBuffer) {
  const result = await checkContentAndImage('', imageBuffer)
  return result.image_analysis
}

// H√†m ki·ªÉm tra c·∫£ vƒÉn b·∫£n v√† h√¨nh ·∫£nh c√πng l√∫c
async function checkBoth(text, imageBuffer) {
  return await checkContentAndImage(text, imageBuffer)
}

module.exports = { checkContent, checkImage, checkBoth, chatbot }
